#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use OptArgs2;
use Data::Dumper;

$Data::Dumper::Indent   = 1;
$Data::Dumper::Sortkeys = 1;

cmd demo => (
    comment => 'OptArg2 demonstration script',
    optargs => sub {

        arg command => (
            isa      => 'SubCmd',
            comment  => '',
            required => 1,
        );

        opt help => (
            isa     => 'Flag',
            alias   => 'h',
            comment => 'print full help message and exit',
            trigger => sub { die shift->usage(OptArgs2::STYLE_FULL) },
        );

        opt usage_tree => (
            isa     => 'Flag',
            comment => 'display usage tree and exit',
            alias   => 'u',
            hidden  => 1,
            trigger => sub { die shift->usage_tree },
        );
    },
);

subcmd 'demo::args' => (
    comment => 'demo for arguments',
    optargs => sub {

        arg string => (
            isa      => 'Str',
            comment  => 'name: string, isa: Str, required: true',
            required => 1,
            default  => 'meh',
        );

        arg string => (
            isa      => 'Str',
            isa_name => 'Str',
            comment  => 'name: string, isa: Str',
            default  => 'meh',
        );

        arg greedy => (
            isa     => 'HashRef',
            greedy  => 1,
            comment => 'name: hashref, isa: HashRef',
        );

    },
);

subcmd 'demo::opt' => (
    comment => 'options',
    optargs => sub {

        arg type => (
            isa      => 'SubCmd',
            comment  => 'opt type',
            required => 1,
        );
    },
);

subcmd 'demo::opt::arrayref' => (
    comment => 'ArrayRef option',
    optargs => sub {

        opt aaa => (
            isa     => 'ArrayRef',
            comment => 'isa: ArrayRef, name: aaa',
            alias   => 'a',
        );
    },
);

subcmd 'demo::opt::bool' => (
    comment => 'Bool option',
    optargs => sub {

        opt aaa => (
            isa     => 'Bool',
            comment => 'isa: Bool, name: aaa',
            alias   => 'a',
        );

        opt bbb => (
            isa     => 'Bool',
            comment => 'isa: Bool, name: bbb',
            default => 0,
            alias   => 'b',
        );

        opt ccc => (
            isa     => 'Bool',
            comment => 'isa: Bool, name: ccc',
            default => 1,
            alias   => 'c',
        );

    },
);

subcmd 'demo::opt::counter' => (
    comment => 'Counter option',
    optargs => sub {

        opt aaa => (
            isa     => 'Counter',
            comment => 'isa: Counter, name: aaa',
            alias   => 'a',
        );

        opt bbb => (
            isa     => 'Counter',
            comment => 'isa: Counter, name: bbb',
            default => -3,
            alias   => 'b',
        );
    },
);

subcmd 'demo::opt::flag' => (
    comment => 'Flag option',
    optargs => sub {

        opt aaa => (
            isa     => 'Flag',
            comment => 'isa: Flag, name: aaa',
            alias   => 'a',
        );

        opt no_bbb => (
            isa     => 'Flag',
            comment => 'isa: Flag, name: no_bbb',
            alias   => 'b',
        );
    },
);

subcmd 'demo::opt::hashref' => (
    comment => 'HashRef option',
    optargs => sub {

        opt aaa => (
            isa     => 'HashRef',
            comment => 'isa: HashRef, name: aaa',
            alias   => 'a',
        );

        opt bbb => (
            isa     => 'HashRef',
            comment => 'isa: HashRef, name: bbb',
            default => { x => 1 },
            alias   => 'b',
        );
    },
);

#    'ArrayRef' => 'STR',
#    'Bool'     => '',
#    'Counter'  => '',
#    'Flag'     => '',
#    'HashRef'  => 'STR',
#    'Int'      => 'INT',
#    'Num'      => 'NUM',
#    'Str'      => 'STR',

subcmd 'demo::opt::rest' => (
    comment => 'arrayref option',
    optargs => sub {

        opt flag => (
            isa     => 'Flag',
            alias   => 'b',
            comment => 'name: flag, isa: Flag',
        );

        opt no_flag => (
            isa     => 'Flag',
            alias   => 'n',
            comment => 'name: no_flag, isa: Flag',
        );

        opt bool => (
            isa     => 'Bool',
            alias   => 'l',
            comment => 'name: bool, isa: Bool',
        );

        opt tbool => (
            isa     => 'Bool',
            comment => 'name: tbool, isa: Bool',
            alias   => 't',
            default => 1,
        );

        opt fbool => (
            isa     => 'Bool',
            comment => 'name: fbool, isa: Bool',
            alias   => 'f',
            default => 0,
        );

        opt hashref => (
            isa     => 'HashRef',
            alias   => 'h',
            comment => 'name: hashref, isa: HashRef',
        );

        opt str => (
            isa     => 'Str',
            alias   => 's',
            comment => 'name: str, isa: Str',
        );

    },
);

my ( $cmd, $opts ) = eval { cmd_optargs('demo') };

if ( my $err = $@ ) {
    if ( ref $err ) {
        print $err . "(" . ref($err) . ")\n";
    }
    else {
        print $err;
    }
}
else {
    print "$cmd:\n"
      . ( Dumper($opts) =~ s/\$VAR1 = (.*);/$1/sr =~ s/^/    /gsmr );
}

__END__
                ---              ------------
                 'ArrayRef'      's@'
                 'Flag'          '!'
                 'Bool'          '!'
                 'Counter'       '+'
                 'HashRef'       's%'
                 'Int'           '=i'
                 'Num'           '=f'
                 'Str'           '=s'

            The presentation of Flag and Bool types in usage messages is as
            follows:

                $name       Type        Default         Presentation
                ----        ----        -------         ------------
                option      Flag        always undef    --option
                no_option   Flag        always undef    --no-option
                option      Bool        undef           --[no-]option
                option      Bool        true            --no-option
                option      Bool        false           --option
                option      Counter     *               --option

            The presentation of the remaining types is as follows:

                $name       Type        isa_name        Presentation
                ----        ----        --------        ------------
                option      ArrayRef    -               --option=STR
                option      HashRef     -               --option=STR
                option      Int         -               --option=INT
                option      Num         -               --option=NUM
                option      Str         -               --option=STR

